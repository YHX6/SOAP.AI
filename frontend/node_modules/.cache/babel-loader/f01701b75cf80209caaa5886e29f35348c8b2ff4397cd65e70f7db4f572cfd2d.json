{"ast":null,"code":"var _jsxFileName = \"/Users/yhx67/Projects/ZH/SOAP.AI/frontend/src/components/MyEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useImperativeHandle, forwardRef, useEffect } from 'react';\nimport { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw, ContentState, Modifier } from 'draft-js';\nimport iconAlignCenter from \"../assets/icons/align_center.svg\";\nimport iconAlignLeft from \"../assets/icons/align_left.svg\";\nimport iconAlignRight from \"../assets/icons/align_right.svg\";\nimport iconBold from \"../assets/icons/bold.svg\";\nimport iconItalics from \"../assets/icons/italics.svg\";\nimport iconUnderScore from \"../assets/icons/underscore.svg\";\nimport iconOderedList from \"../assets/icons/ordered_list.svg\";\nimport iconUnoderedList from \"../assets/icons/unordered_list.svg\";\n\n// you might need to adjust the path to css file\nimport \"../assets/css/draft-editor.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyEditor = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [cursorStyle, setCursorStyle] = useState([]);\n  // render init data\n  useEffect(() => {\n    if (props.rawContent && Object.keys(props.rawContent).length !== 0) {\n      setContentFromRaw(props.rawContent);\n    } else if (props.textContent) {\n      setContentFromText(props.textContent);\n    }\n  }, []);\n\n  /////////////////////////////////////////////////////////\n  // get style of current content\n  const getStylesAtCursor = editorState => {\n    const selection = editorState.getSelection();\n    const currentContent = editorState.getCurrentContent();\n    let style = {};\n    if (!selection.isCollapsed()) {\n      const startKey = selection.getStartKey();\n      const startOffset = selection.getStartOffset();\n      const blockWithStart = currentContent.getBlockForKey(startKey);\n      style = blockWithStart.getInlineStyleAt(startOffset); // if bold, italic\n      style = style.toArray();\n      // font family and size\n      const metadata = blockWithStart.getData();\n      style.push(metadata.get(\"fontSize\"));\n      style.push(metadata.get(\"fontFamily\"));\n      // if is ordered/unordered list\n      const blockType = blockWithStart.getType();\n      if (blockType) {\n        style.push(blockType);\n      }\n    } else {\n      const focusKey = selection.getFocusKey();\n      const focusOffset = selection.getFocusOffset();\n      const blockWithFocus = currentContent.getBlockForKey(focusKey);\n      style = blockWithFocus.getInlineStyleAt(Math.max(focusOffset - 1, 0)); // if bold, italic\n      style = style.toArray();\n      // font family and size\n      const metadata = blockWithFocus.getData();\n      style.push(metadata.get(\"fontSize\"));\n      style.push(metadata.get(\"fontFamily\"));\n      // if is ordered/unordered list\n      const blockType = blockWithFocus.getType();\n      if (blockType) {\n        style.push(blockType);\n      }\n    }\n\n    //  text align type\n    let alignType = getSelectedContentAlignedType(editorState);\n    if (alignType) {\n      style.push(alignType);\n    }\n    ;\n    return style;\n  };\n\n  // get the style of where the cursor is to as to render the buttons:on \n  const onChange = newEditorState => {\n    const stylesAtCursor = getStylesAtCursor(newEditorState);\n    setCursorStyle(stylesAtCursor);\n    setEditorState(newEditorState);\n  };\n\n  // list tyle\n  const toggleInlineStyle = useCallback(inlineStyle => {\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  }, [editorState, onChange]);\n\n  // bold/underscore\n  const toggleBlockType = useCallback(blockType => {\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  }, [editorState, onChange]);\n\n  //  for text alignment\n  function toggleTextAlignment(editorState, alignment) {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const newContentState = Modifier.mergeBlockData(contentState, selection, {\n      textAlign: alignment\n    });\n    return EditorState.push(editorState, newContentState, 'change-block-data');\n  }\n  const applyAlignment = alignment => {\n    const newState = toggleTextAlignment(editorState, alignment);\n    setEditorState(newState);\n  };\n\n  //////////////////////  block style ///////////////////////\n  function blockStyleFn(block) {\n    let className = '';\n    const textAlign = block.getData().get('textAlign');\n    if (textAlign) {\n      className += ` textAlign${textAlign.charAt(0).toUpperCase() + textAlign.slice(1)}`;\n    }\n    const blockData = block.getData();\n    if (blockData.get('fontSize')) {\n      className += \" \" + blockData.get('fontSize');\n    }\n    if (blockData.get('fontFamily')) {\n      className += \" \" + blockData.get('fontFamily');\n    }\n    return className;\n  }\n  function getSelectedContentAlignedType(editorState) {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const startKey = selection.getStartKey();\n    const startBlock = contentState.getBlockForKey(startKey);\n    const blockData = startBlock.getData();\n    const textAlign = blockData.get('textAlign');\n    return textAlign;\n  }\n\n  // Set content\n  const setContentFromRaw = rawContent => {\n    // const contentState = convertFromRaw(rawContent);\n    setEditorState(EditorState.createWithContent(convertFromRaw(rawContent)));\n  };\n  const setContentFromText = text => {\n    const contentState = ContentState.createFromText(text);\n    setEditorState(EditorState.createWithContent(contentState));\n  };\n\n  // get Content\n  const getRawContent = () => {\n    return convertToRaw(editorState.getCurrentContent());\n  };\n  const getTextContent = () => {\n    const rawContent = convertToRaw(editorState.getCurrentContent());\n    let content = \"\";\n    for (let i = 0; i < rawContent.blocks.length; i++) {\n      content += rawContent.blocks[i].text + \"\\n\";\n    }\n    return content;\n  };\n\n  // font size and family\n  const applyClassFromSelection = useCallback((className, type) => {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const blocks = contentState.getBlockMap();\n\n    // Apply class to each block within selection\n    const newBlocks = blocks.map(block => {\n      if (selection.hasEdgeWithin(block.getKey(), 0, block.getLength())) {\n        // Use metadata to store the class information\n        let newBlock = block.set('data', block.getData().merge({\n          [type]: className\n        }));\n        return newBlock;\n      }\n      return block;\n    });\n    const newContentState = contentState.set('blockMap', newBlocks);\n    const newEditorState = EditorState.push(editorState, newContentState, 'change-block-data');\n    setEditorState(EditorState.forceSelection(newEditorState, selection));\n  }, [editorState]);\n\n  ///////////////////////////////////////////////////////////////////////////////////////////\n  // pass function for parent compenet\n  ///////////////////////////////////////////////////////////////////////////////////////////\n  useImperativeHandle(ref, () => ({\n    getRawContent() {\n      return getRawContent();\n    },\n    getTextContent() {\n      return getTextContent();\n    },\n    setRawContent(rawContent) {\n      setContentFromRaw(rawContent);\n    },\n    setTextContent(content) {\n      setContentFromText(content);\n    },\n    setContentFromText\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-container\",\n    id: \"editor-container\",\n    children: [props.showTools ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"toolbar-btn-select\",\n        onChange: e => applyClassFromSelection(e.target.value, 'fontSize'),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontSizeNormal\",\n          children: \"Normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontSizeH1\",\n          children: \"Heading1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontSizeH2\",\n          children: \"Heading2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontSizeH3\",\n          children: \"Heading3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontSizeSmall\",\n          children: \"Small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"toolbar-btn-select\",\n        onChange: e => applyClassFromSelection(e.target.value, 'fontFamily'),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilySansSerif\",\n          children: \"Arial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilySerif\",\n          children: \"Georgia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilyTimes\",\n          children: \"Times New Roman\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilyCourier\",\n          children: \"Courier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilyLucida-console\",\n          children: \"Lucida Console\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fontFamilyConsolas\",\n          children: \"Consolas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"BOLD\")}`,\n        onClick: () => toggleInlineStyle('BOLD'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconBold,\n          alt: \"icon bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 143\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"ITALIC\")}`,\n        onClick: () => toggleInlineStyle('ITALIC'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconItalics,\n          alt: \"icon italics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 147\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"UNDERLINE\")}`,\n        onClick: () => toggleInlineStyle('UNDERLINE'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconUnderScore,\n          alt: \"icon underscore\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 153\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"unordered-list-item\")}`,\n        onClick: () => toggleBlockType('unordered-list-item'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconUnoderedList,\n          alt: \"icon unordered list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 171\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"ordered-list-item\")}`,\n        onClick: () => toggleBlockType('ordered-list-item'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconOderedList,\n          alt: \"icon ordered list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 167\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"left\")}`,\n        onClick: () => applyAlignment('left'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconAlignLeft,\n          alt: \"icon align left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 140\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"center\")}`,\n        onClick: () => applyAlignment('center'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconAlignCenter,\n          alt: \"icon align center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 144\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"right\")}`,\n        onClick: () => applyAlignment('right'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconAlignRight,\n          alt: \"icon align right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 142\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-block\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        editorState: editorState,\n        onChange: onChange,\n        blockStyleFn: blockStyleFn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 7\n  }, this);\n}, \"83NNUl47WNWFezam+X2WBMvLaeg=\")), \"83NNUl47WNWFezam+X2WBMvLaeg=\");\n_c2 = MyEditor;\nexport default MyEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyEditor$forwardRef\");\n$RefreshReg$(_c2, \"MyEditor\");","map":{"version":3,"names":["React","useState","useCallback","useImperativeHandle","forwardRef","useEffect","Editor","EditorState","RichUtils","convertToRaw","convertFromRaw","ContentState","Modifier","iconAlignCenter","iconAlignLeft","iconAlignRight","iconBold","iconItalics","iconUnderScore","iconOderedList","iconUnoderedList","jsxDEV","_jsxDEV","MyEditor","_s","_c","props","ref","editorState","setEditorState","createEmpty","cursorStyle","setCursorStyle","rawContent","Object","keys","length","setContentFromRaw","textContent","setContentFromText","getStylesAtCursor","selection","getSelection","currentContent","getCurrentContent","style","isCollapsed","startKey","getStartKey","startOffset","getStartOffset","blockWithStart","getBlockForKey","getInlineStyleAt","toArray","metadata","getData","push","get","blockType","getType","focusKey","getFocusKey","focusOffset","getFocusOffset","blockWithFocus","Math","max","alignType","getSelectedContentAlignedType","onChange","newEditorState","stylesAtCursor","toggleInlineStyle","inlineStyle","toggleBlockType","toggleTextAlignment","alignment","contentState","newContentState","mergeBlockData","textAlign","applyAlignment","newState","blockStyleFn","block","className","charAt","toUpperCase","slice","blockData","startBlock","createWithContent","text","createFromText","getRawContent","getTextContent","content","i","blocks","applyClassFromSelection","type","getBlockMap","newBlocks","map","hasEdgeWithin","getKey","getLength","newBlock","set","merge","forceSelection","setRawContent","setTextContent","id","children","showTools","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","includes","onClick","src","alt","_c2","$RefreshReg$"],"sources":["/Users/yhx67/Projects/ZH/SOAP.AI/frontend/src/components/MyEditor.jsx"],"sourcesContent":["import React, {useState, useCallback, useImperativeHandle, forwardRef, useEffect} from 'react';\nimport { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw, ContentState, Modifier  } from 'draft-js';\n\n\nimport iconAlignCenter from \"../assets/icons/align_center.svg\";\nimport iconAlignLeft from \"../assets/icons/align_left.svg\";\nimport iconAlignRight from \"../assets/icons/align_right.svg\";\nimport iconBold from \"../assets/icons/bold.svg\";\nimport iconItalics from \"../assets/icons/italics.svg\";\nimport iconUnderScore from \"../assets/icons/underscore.svg\";\nimport iconOderedList from \"../assets/icons/ordered_list.svg\";\nimport iconUnoderedList from \"../assets/icons/unordered_list.svg\";\n\n// you might need to adjust the path to css file\nimport \"../assets/css/draft-editor.css\";\n\n\n\nconst MyEditor = forwardRef((props, ref)  =>{\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [cursorStyle, setCursorStyle] = useState([]);\n  // render init data\n  useEffect(() => {\n    if(props.rawContent && Object.keys(props.rawContent).length !== 0){\n      setContentFromRaw(props.rawContent);\n    }else if(props.textContent){\n        setContentFromText(props.textContent);\n    }\n    \n  }, [])\n\n\n\n  /////////////////////////////////////////////////////////\n  // get style of current content\n  const getStylesAtCursor = (editorState) => {\n    const selection = editorState.getSelection();\n    const currentContent = editorState.getCurrentContent();\n    let style = {};\n\n    if (!selection.isCollapsed()) {\n      const startKey = selection.getStartKey();\n      const startOffset = selection.getStartOffset();\n      const blockWithStart = currentContent.getBlockForKey(startKey);\n      style = blockWithStart.getInlineStyleAt(startOffset);  // if bold, italic\n      style = style.toArray(); \n      // font family and size\n      const metadata = blockWithStart.getData();  \n      style.push(metadata.get(\"fontSize\"));  \n      style.push(metadata.get(\"fontFamily\"));\n      // if is ordered/unordered list\n      const blockType = blockWithStart.getType();\n      if (blockType ) {\n        style.push(blockType);\n      } \n\n    } else {\n      const focusKey = selection.getFocusKey();\n      const focusOffset = selection.getFocusOffset();\n      const blockWithFocus = currentContent.getBlockForKey(focusKey);\n      style = blockWithFocus.getInlineStyleAt(Math.max(focusOffset - 1, 0));  // if bold, italic\n      style = style.toArray(); \n       // font family and size\n      const metadata = blockWithFocus.getData();\n      style.push(metadata.get(\"fontSize\"));\n      style.push(metadata.get(\"fontFamily\"));\n      // if is ordered/unordered list\n      const blockType = blockWithFocus.getType();\n      if (blockType ) {\n        style.push(blockType);\n      } \n    }\n\n\n    //  text align type\n    let alignType = getSelectedContentAlignedType(editorState);\n    if(alignType){\n      style.push(alignType);\n    };\n\n    return  style;\n  };\n\n  // get the style of where the cursor is to as to render the buttons:on \n  const onChange = (newEditorState) => {\n    const stylesAtCursor = getStylesAtCursor(newEditorState);\n    setCursorStyle(stylesAtCursor);\n    setEditorState(newEditorState);\n  };\n\n  // list tyle\n  const toggleInlineStyle = useCallback((inlineStyle) => {\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  }, [editorState, onChange]);\n\n  // bold/underscore\n  const toggleBlockType = useCallback((blockType) => {\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  }, [editorState, onChange]);\n\n\n    //  for text alignment\n    function toggleTextAlignment(editorState, alignment) {\n      const selection = editorState.getSelection();\n      const contentState = editorState.getCurrentContent();\n    \n      const newContentState = Modifier.mergeBlockData(\n        contentState,\n        selection,\n        { textAlign: alignment }\n      );\n    \n      return EditorState.push(editorState, newContentState, 'change-block-data');\n    }\n\n    const applyAlignment = (alignment) => {\n      const newState = toggleTextAlignment(editorState, alignment);\n      setEditorState(newState);\n    };\n\n    //////////////////////  block style ///////////////////////\n    function blockStyleFn(block) {\n      let className = '';\n\n      const textAlign = block.getData().get('textAlign');\n      if (textAlign) {\n        className += ` textAlign${textAlign.charAt(0).toUpperCase() + textAlign.slice(1)}`;\n      }\n      const blockData = block.getData();\n      if (blockData.get('fontSize')) {\n        className += \" \" + blockData.get('fontSize');\n      }\n      if (blockData.get('fontFamily')) {\n        className +=  \" \" + blockData.get('fontFamily');\n      }\n      return className;\n    }\n\n    function getSelectedContentAlignedType(editorState) {\n      const selection = editorState.getSelection();\n      const contentState = editorState.getCurrentContent();\n      const startKey = selection.getStartKey();\n      const startBlock = contentState.getBlockForKey(startKey);\n      const blockData = startBlock.getData();\n      const textAlign = blockData.get('textAlign');\n    \n      return textAlign;\n    }\n\n\n\n  // Set content\n  const setContentFromRaw = (rawContent) => {\n    // const contentState = convertFromRaw(rawContent);\n    setEditorState(EditorState.createWithContent(convertFromRaw(rawContent)));\n  }\n  const setContentFromText = (text) => {\n    const contentState = ContentState.createFromText(text);\n    setEditorState(EditorState.createWithContent(contentState));\n  }\n\n\n  // get Content\n  const getRawContent = () => {\n    return convertToRaw(editorState.getCurrentContent());\n  }\n  const getTextContent = () => {\n    const rawContent = convertToRaw(editorState.getCurrentContent());\n    let content = \"\";\n    for(let i =0; i<rawContent.blocks.length; i++){\n      content += rawContent.blocks[i].text + \"\\n\";\n    }\n    return content;\n  }\n\n  // font size and family\n  const applyClassFromSelection = useCallback((className, type) => {\n    const selection = editorState.getSelection();\n    const contentState = editorState.getCurrentContent();\n    const blocks = contentState.getBlockMap();\n\n    // Apply class to each block within selection\n    const newBlocks = blocks.map((block) => {\n      if (selection.hasEdgeWithin(block.getKey(), 0, block.getLength())) {\n        // Use metadata to store the class information\n        let newBlock = block.set('data', block.getData().merge({[type]: className}));\n        return newBlock;\n      }\n      return block;\n    });\n\n    const newContentState = contentState.set('blockMap', newBlocks);\n    const newEditorState = EditorState.push(editorState, newContentState, 'change-block-data');\n\n    setEditorState(EditorState.forceSelection(newEditorState, selection));\n  }, [editorState]);\n\n\n\n  ///////////////////////////////////////////////////////////////////////////////////////////\n  // pass function for parent compenet\n  ///////////////////////////////////////////////////////////////////////////////////////////\n  useImperativeHandle(ref, () => ({\n    getRawContent(){\n      return getRawContent();\n    },\n    getTextContent(){\n      return getTextContent();\n    },\n    setRawContent(rawContent){\n      setContentFromRaw(rawContent);\n    },\n    setTextContent(content){\n      setContentFromText(content);\n    },\n    setContentFromText,\n  }))\n\n\n    return (\n      <div className='editor-container' id=\"editor-container\">\n        {props.showTools ?\n          <div className=\"toolbar\">\n                <select className='toolbar-btn-select' onChange={(e) => applyClassFromSelection(e.target.value, 'fontSize')}>\n                  <option value=\"\"></option>\n                  <option value=\"fontSizeNormal\">Normal</option>\n                  <option value=\"fontSizeH1\">Heading1</option>\n                  <option value=\"fontSizeH2\">Heading2</option>\n                  <option value=\"fontSizeH3\">Heading3</option>\n                  <option value=\"fontSizeSmall\">Small</option>\n                </select>\n\n                <select className='toolbar-btn-select' onChange={(e) => applyClassFromSelection(e.target.value, 'fontFamily')}>\n                  <option value=\"\"></option>\n                  <option value=\"fontFamilySansSerif\">Arial</option>\n                  <option value=\"fontFamilySerif\">Georgia</option>\n                  <option value=\"fontFamilyTimes\">Times New Roman</option>\n                  <option value=\"fontFamilyCourier\">Courier</option>\n                  <option value=\"fontFamilyLucida-console\">Lucida Console</option>\n                  <option value=\"fontFamilyConsolas\">Consolas</option>\n                </select>\n\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"BOLD\")}`} onClick={() => toggleInlineStyle('BOLD')}><img src={iconBold} alt=\"icon bold\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"ITALIC\")}`} onClick={() => toggleInlineStyle('ITALIC')}><img src={iconItalics} alt=\"icon italics\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"UNDERLINE\")}`} onClick={() => toggleInlineStyle('UNDERLINE')}><img src={iconUnderScore} alt=\"icon underscore\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"unordered-list-item\")}`} onClick={() => toggleBlockType('unordered-list-item')}><img src={iconUnoderedList} alt=\"icon unordered list\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"ordered-list-item\")}`} onClick={() => toggleBlockType('ordered-list-item')}><img src={iconOderedList} alt=\"icon ordered list\"></img></button>\n          \n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"left\")}`} onClick={() => applyAlignment('left')}><img src={iconAlignLeft} alt=\"icon align left\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"center\")}`} onClick={() => applyAlignment('center')}><img src={iconAlignCenter} alt=\"icon align center\"></img></button>\n            <button className={`toolbar-btn-type1 is-cursor-style-${cursorStyle.includes(\"right\")}`} onClick={() => applyAlignment('right')}><img src={iconAlignRight} alt=\"icon align right\"></img></button>\n        \n          </div>\n          : \"\"\n        }\n        <div className='editor-block'>\n          <Editor \n            editorState={editorState} \n            onChange={onChange} \n            blockStyleFn={blockStyleFn}\n          />\n        </div>\n      </div>\n    );\n  \n});\n\nexport default MyEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}